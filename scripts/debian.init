#!/bin/sh
### BEGIN INIT INFO
# Provides:          gitlab-ci
# Required-Start:    $local_fs $remote_fs $network $syslog
# Required-Stop:     $local_fs $remote_fs $network $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: starts the GitLab CI Scheduler
# Description:       The GitLab CI Scheduler allocates tasks on Mesos cluster
### END INIT INFO
# it's often easier to not use set -e and instead check the result of each command separately
#set -e

NAME="storm-mesos"
DESC="Storm Mesos Framework"
DAEMON=/usr/local/bin/storm-mesos

# if configuration files remain but the package has been removed
test -x $DAEMON || exit 0

. /lib/lsb/init-functions

PIDFILE=/var/run/mesos-master.pid

go_daemon() {
  [ -z "${ULIMIT:-}" ] || ulimit $ULIMIT
  exec ${DAEMON} 2>&1
}

start_storm_mesos() {
  start-stop-daemon --start --background --quiet \
                    --pidfile "$PIDFILE" --make-pidfile --exec "$0" -- go_daemon
}

stop_storm_mesos() {
  start-stop-daemon --stop --quiet --pidfile "$PIDFILE"
}

status_storm_mesos() {
    if (type status_of_proc > /dev/null 2>&1) ; then
        status_of_proc -p "${PIDFILE}" "${DAEMON}" "${NAME}" && exit 0 || exit $?
    else
        status_of_proc() {
            local pidfile daemon name status

            pidfile=
            OPTIND=1
            while getopts p: opt ; do
                case "$opt" in
                    p)  pidfile="$OPTARG";;
                esac
            done
            shift $(($OPTIND - 1))

            if [ -n "$pidfile" ]; then
                pidfile="-p $pidfile"
            fi
            daemon="$1"
            name="$2"
            status="0"
            pidofproc $pidfile $daemon >/dev/null || status="$?"
            if [ "$status" = 0 ]; then
                log_success_msg "$name is running"
                return 0
            elif [ "$status" = 4 ]; then
                log_failure_msg "could not access PID file for $name"
                return $status
            else
                log_failure_msg "$name is not running"
                return $status
            fi
        }
        status_of_proc -p "${PIDFILE}" "${DAEMON}" "${NAME}"
    fi
}


case "$1" in
  go_daemon)
    go_daemon
    ;;
  start)
    log_daemon_msg "Starting $DESC" "$NAME"
    start_storm_mesos
    log_end_msg $?
    ;;
  stop)
    log_daemon_msg "Stopping $DESC" "$NAME"
    stop_storm_mesos
    log_end_msg $?
   ;;
  restart|force-reload)
    log_daemon_msg "Restarting $DESC" "$NAME"
    stop_storm_mesos
    sleep 1
    start_storm_mesos
    log_end_msg $?
    ;;
  status)
    status_storm_mesos
    ;;
  *)
    echo "Usage: $NAME {start|stop|restart|status}" >&2
    exit 1
    ;;
esac

exit 0
