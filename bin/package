#!/bin/bash
set -o errexit -o nounset -o pipefail
export LC_ALL=C
function -h {
cat <<USAGE
 USAGE: package

 Creates debian package for storm-mesos
USAGE
}; function --help { -h ;}

this="$(cd "$(dirname "$0")" && pwd -P)"
name="storm-mesos"
patch=""

function main {
  while [[ $# -gt 0 ]]
  do
    case "$1" in                                      # Munging globals, beware
      --version)                version="$2"    ; shift 2 ;;
      --patch)                  patch="$2" ; shift 2 ;;
      --use-sudo)               use_sudo=true; shift 1 ;;
      *)                        err 'Argument error. Please see help.' ;;
    esac
  done

  msg "building ${name} version: ${version}"
  cleanup
  checkout
  build
  installation
  pkg
  finish
  msg "packaging finished!"
}

function cleanup {
  pwd="$(pwd -P)"
  rm -f *.deb
  rm -rf _release
  rm -rf lib/ classes/
  rm -rf target
  rm -f *storm-mesos*.tar.xz
}

function checkout {
  package="apache-storm-${version}"
  if [ ! -d "${package}" ]; then
      local mirror="http://www.us.apache.org/dist/incubator/storm"
      # src package should be enough, we can get rest from maven
      local file=${package}-src.tar.gz
      local url="${mirror}/${package}/${file}"
      msg "fetching ${url}"
      curl -LO ${url}
      tar xvf $file
      rm -f $file
  fi
}

function build {(
  #mvn dependency:copy-dependencies
  mvn package
)}

function installation {(
  DEBDIR="${pwd}/deb"
  local confdir="etc/storm"
  local stormhome="usr/lib/storm"
  mkdir -p "${pwd}/deb"
  cd "${pwd}/deb"
  mkdir -p "var/log/storm"
  mkdir -p "etc/default"
  mkdir -p $confdir
  # copy all files
  mkdir -p "usr/lib/storm/storm-local"
  local jar="../target/storm-mesos*.jar"
  local jar_path=$(ls ${jar})
  if [ ! -f $jar_path ]; then
    err "file ${jar_path} does not exist"
  fi
  cp $jar_path $stormhome
  cp -r "${pwd}/lib" $stormhome

  # pretend to have a release version
  echo $version > "$stormhome/RELEASE"

  # bin scripts
  mkdir -p "usr/local/bin"
  cp "../bin/storm-mesos" "usr/local/bin/"

  # storm python script is using relative path to bin/storm location...
  mkdir -p "$stormhome/bin"
  cp "../${package}/bin/storm" "$stormhome/bin/"
  cp "../${package}/bin/storm.cmd" "$stormhome/bin/"
  cp "../${package}/bin/storm-config.cmd" "$stormhome/bin/"

  # confiuration
  mkdir -p "$stormhome/conf"
  cp "../config/storm-mesos" etc/default/
  cp "../config/storm.yaml" "$stormhome/conf/"
  cp "../config/storm.log.properties" $confdir
  cp "../config/storm" etc/default/
  cp "../config/storm-ui" etc/default/
  init_scripts "$linux"
  cd ..
)}

function pkg {
  cd $pwd
  local version="${version}${patch}"
  local opts=()
  pkg="$name"_"$version"_"all".deb
  opts=( -t deb
         -n "$name"
         -v "$version"
         --description
"Storm connector for Mesos cluster manager"
         --url=https://storm.incubator.apache.org
         --category misc
         --vendor ""
         -m tomas.barton@modgen.net
         --prefix=/
         --after-install "$pwd/debian/postinst.sh"
         --before-install "$pwd/debian/preinst.sh"
         --config-files "/etc/default/storm-mesos"
         --config-files "/etc/default/storm-ui"
         --config-files "/etc/default/storm"
         --config-files "/usr/lib/storm/conf/storm.yaml"
         -d "default-jre | java7-runtime-headless | java6-runtime-headless"
         -d "mesos"
         -d "python"
         -s dir )
  ( cd deb && "$gem_bin"/fpm "${opts[@]}" -p "$pwd"/"$pkg" -- . )
}

function init_scripts {
  case "$1" in
    debian/*) mkdir -p ${DEBDIR}/etc/init.d
              cp -p "$pwd"/debian/debian.init "${DEBDIR}/etc/init.d/${name}"
              cp -p "$pwd"/debian/debian.storm-ui "${DEBDIR}/etc/init.d/storm-ui"
       ;;
    ubuntu/*) mkdir -p ${DEBDIR}/etc/init
              cp "$pwd"/debian/ubuntu.upstart "${DEBDIR}/etc/init/${name}.conf"
              cp "$pwd"/debian/ubuntu.storm-ui "${DEBDIR}/etc/init/storm-ui.conf"
       ;;
    *) err "Not sure how to make init scripts for: $1" ;;
  esac
}


function finish {
  echo "removing deb directory"
  #remove build directory
  rm -rf "$pwd/deb"
}

function get_system_info {
  linux="$(lsb_release_tag)"            # <distro>/<version>, like ubuntu/12.10
  arch="$(architecture)"          # In the format used to label distro packages
  gem_bin="$(find_gem_bin)"                          # Might not be on the PATH
  codename="$(get_codename)"
}

function lsb_release_tag {
  if [ -f /etc/lsb-release ]; then
    lsb_release --id --release | cut -d: -f2 | tr A-Z a-z | xargs | tr ' ' '/'
  else
    local version=$(awk '{print $3}' /etc/*-release | head -n1)
    local dist=$(cat /etc/*-release |grep ^ID= | sed 's/ID=//')
    echo "${dist}/${version}"
  fi
}

function architecture {
  case "$linux" in
    ubuntu/*|debian/*) dpkg-architecture -qDEB_BUILD_ARCH ;;
    centos/*|redhat/*) arch ;;
    *)                 err "Not sure how to determine arch for: $linux" ;;
  esac
}

function find_gem_bin {
  gem env | sed -n '/^ *- EXECUTABLE DIRECTORY: */ { s/// ; p }'
}

function get_codename {
  case "$linux" in
    ubuntu/*|debian/*)
      if [ -f /etc/lsb-release ]; then
        lsb_release -c | cut -d: -f2 | tr A-Z a-z | xargs | tr ' ' '/'
      else
        cat /etc/*-release | grep ^VERSION= | sed 's/VERSION=//' | cut -d "(" -f2 | cut -d ")" -f1
      fi
    ;;
    centos/*|redhat/*)
      err "not implemented yet"
    ;;
    *)                 err "Not sure how to configure logrotate for: $linux" ;;
  esac
}

function msg { out "$*" >&2 ;}
function err { local x=$? ; msg "$*" ; return $(( $x == 0 ? 1 : $x )) ;}
function out { printf '%s\n' "$*" ;}


if [[ ${1:-} ]] && declare -F | cut -d' ' -f3 | fgrep -qx -- "${1:-}"
then
  case "$1" in
    -h|--help|go) : ;;
    *) get_system_info ;;
  esac
  "$@"
else
  get_system_info
  main "$@"
fi

